public class TaskManager {

  Task taskTree;
  int numberOfNodes;

  public TaskManager(String fileName) {

    TaskScanner scanner = new TaskScanner();
    scanner.scanFile(fileName);
    this.taskTree = scanner.getTaskTree();//The task tree is still unoptimized
    this.numberOfNodes = scanner.getTotalTasks();

    //Check for circularity
    if (isCircular(this.taskTree)) {

      System.out.println("This tree is circular! Aborting!");
      System.exit(-1);

    }

  }

  public boolean isCircular(Task taskTree) {

    boolean result = false;

    if (taskTree.hasBeenVisited()) {
        System.out.println("This tree is circular starting and ending at task " + taskTree.getID() + ".");
        return true;
    }

    taskTree.visit();

    for (Task t : taskTree.getOutEdges()) result = result || isCircular(t);

    taskTree.leave();
    return result;

  }

  public void optimizeTasksOnTime(Task taskTree) {

    //Getting the first level of tasks, because this whole structure assumes that
    //that the structure generated by my TaskScanner is the one being put in.
    Task[] currentTask = taskTree.getOutEdges();
    

  }

  public Task getTaskTree() {return this.taskTree;}

}
